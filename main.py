import logging
import os
import telebot
from flask import Flask, request
from telebot.apihelper import ApiTelegramException

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DEBUG –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ª–æ–≥–æ–≤
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),  # –õ–æ–≥–∏ –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7565067409:AAF-mHyv0CWgQ_UUQnhNZZ8NtfpMk5eo-x8'
if not TOKEN:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ü—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤
questions = [
    {
        "question": "–®—É—Ä—à–∞—Ç –≤ –∫–∞—Ä–º–∞–Ω–µ, –≤ –∫–æ—à–µ–ª—å–∫–µ, —Å—á–∏—Ç–∞—Ç—å –≤—Å–µ –ª—é–±—è—Ç –∏—Ö –≤ —É–º–µ, –∞ —è –∂–µ–ª–∞—é –≤–∞–º, —Ä–µ–±—è—Ç–∞, –∏—Ö –º–Ω–æ–≥–æ-–º–Ω–æ–≥–æ –≤ –¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç–æ–º!",
        "options": ["–í–æ—Ä–æ–Ω—ã", "–°–µ–º–µ—á–∫–∏", "–î–µ–Ω—å–≥–∏"],
        "answer": "–î–µ–Ω—å–≥–∏"
    },
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã...
]

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–µ–ª–∞–Ω–∏—è-–∑–∞–≥–∞–¥–∫–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –¥–µ–¥ –ú–æ—Ä–æ–∑! –û—Ç–≥–∞–¥–∞–π—Ç–µ –∏ —É–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –≤ –º–µ—à–∫–µ –æ–Ω –≤–∞–º –ø—Ä–∏–Ω–µ—Å! –ì–æ—Ç–æ–≤—ã?"
        )
        ask_question(message.chat.id, 0)  # –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_welcome: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
def ask_question(chat_id, question_index):
    try:
        if question_index < len(questions):
            question = questions[question_index]
            logger.debug(f"–ó–∞–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å {question_index} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {question['question']}")
            markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            for option in question["options"]:
                markup.add(option)
            bot.send_message(chat_id, question["question"], reply_markup=markup)
            bot.register_next_step_handler_by_chat_id(chat_id, lambda msg: check_answer(msg, question_index))
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã")
            bot.send_message(chat_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –æ—Ç–≥–∞–¥–∞–ª–∏ –≤—Å–µ –∑–∞–≥–∞–¥–∫–∏! –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º!!!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ask_question: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

def check_answer(message, question_index):
    try:
        question = questions[question_index]
        logger.debug(f"–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}: {message.text}")
        if message.text == question["answer"]:
            bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
        else:
            bot.send_message(message.chat.id, f"–£–≤—ã, –Ω–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['answer']}.")
        ask_question(message.chat.id, question_index + 1)
    except IndexError:
        logger.error(f"–í–æ–ø—Ä–æ—Å —Å –∏–Ω–¥–µ–∫—Å–æ–º {question_index} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_answer: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def send_help(message):
    bot.send_message(
        message.chat.id,
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Webhook
@app.route(f"/{TOKEN}", methods=['POST'])
def webhook():
    json_data = request.get_data(as_text=True)
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å Webhook: {json_data}")
    update = telebot.types.Update.de_json(json_data)
    bot.process_new_updates([update])
    return "OK", 200

if __name__ == "__main__":
    try:
        logger.info("–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π Webhook...")
        bot.remove_webhook()
        logger.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π Webhook...")
        webhook_url = f"https://ng2025-92xj.onrender.com/{TOKEN}"
        if not webhook_url.startswith("https://"):
            logger.error("Webhook URL –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS.")
            raise ValueError("Webhook URL –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS.")
        success = bot.set_webhook(url=webhook_url)
        if success:
            logger.info("Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Webhook.")
        logger.info("–ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
    except ApiTelegramException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Webhook: {e}")
